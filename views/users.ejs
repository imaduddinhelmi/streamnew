<% layout('layout') -%>

<div class="flex flex-col md:flex-row md:items-center justify-between mb-6 gap-4">
  <div>
    <h2 class="text-2xl font-bold">User Management</h2>
    <p class="text-gray-400 text-sm mt-1">Manage user accounts and permissions</p>
  </div>
  <div>
    <button onclick="openCreateModal()" 
      class="px-4 py-2 bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors flex items-center">
      <i class="ti ti-plus mr-1.5"></i>
      <span>Create New User</span>
    </button>
  </div>
</div>

<div class="bg-gray-800 rounded-lg p-4 mb-6">
  <div class="flex flex-row items-center gap-3">
    <div class="relative w-full sm:w-80 md:w-96">
      <input type="text" id="searchInput" placeholder="Search users..." 
        class="w-full bg-dark-700 text-white pl-9 pr-4 py-2.5 border border-gray-600 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
      <i class="ti ti-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
    </div>
    <div class="w-32">
      <select id="roleFilter" 
        class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2.5 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
        <option value="">All Roles</option>
        <option value="admin">Admin</option>
        <option value="member">Member</option>
      </select>
    </div>
    <div class="w-32">
      <select id="statusFilter" 
        class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2.5 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
        <option value="">All Status</option>
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
      </select>
    </div>
  </div>
</div>

<div class="bg-gray-800 rounded-lg overflow-hidden">
  <div class="overflow-x-auto">
    <table class="w-full">
      <thead class="bg-dark-700">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">User</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Role</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Status</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Video</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Streaming</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Created</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody id="usersTableBody" class="divide-y divide-gray-700">
        <% if (users && users.length > 0) { %>
          <% users.forEach(function(user) { %>
            <tr class="hover:bg-dark-700/50 transition-colors user-row" 
                data-username="<%= user.username.toLowerCase() %>" 
                data-role="<%= user.user_role %>" 
                data-status="<%= user.status %>">
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <div class="flex-shrink-0 h-10 w-10">
                    <div class="h-10 w-10 rounded-full overflow-hidden ring-2 ring-gray-600">
                      <% if (user.avatar_path) { %>
                        <img src="<%= user.avatar_path %>" alt="<%= user.username %>'s avatar" 
                             class="w-full h-full object-cover" 
                             onerror="this.onerror=null; this.src='/images/default-avatar.jpg';">
                      <% } else { %>
                        <img src="/images/default-avatar.jpg" alt="Default avatar" class="w-full h-full object-cover">
                      <% } %>
                    </div>
                  </div>
                  <div class="ml-4">
                    <div class="text-sm font-medium text-white"><%= user.username %></div>
                    <div class="text-sm text-gray-400">ID: <%= user.id %></div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full 
                  <%= user.user_role === 'admin' ? 'bg-purple-100 text-purple-800' : 'bg-blue-100 text-blue-800' %>">
                  <%= user.user_role %>
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full 
                  <%= user.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                  <%= user.status %>
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400 cursor-pointer hover:bg-gray-700/30 transition-colors" data-user-id="<%= user.id %>" data-username="<%= user.username %>" onclick="showVideoModal(this)">
                <div class="flex flex-col">
                  <div class="flex items-center mb-1">
                    <i class="ti ti-video mr-1"></i>
                    <span><%= user.videoCount || 0 %> video</span>
                  </div>
                  <div class="flex items-center">
                    <span class="inline-flex px-1.5 py-0.5 text-xs rounded-md bg-gray-600 text-gray-200">
                    <% if (user.totalVideoSize) { %>
                      <%= user.totalVideoSize %>
                    <% } else { %>
                      0 B
                    <% } %>
                    </span>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400 cursor-pointer hover:bg-gray-700/30 transition-colors" data-user-id="<%= user.id %>" data-username="<%= user.username %>" onclick="showStreamModal(this)">
                <div class="flex flex-col">
                  <div class="flex items-center mb-1">
                    <i class="ti ti-broadcast mr-1"></i>
                    <span><%= user.streamCount || 0 %> stream</span>
                  </div>
                  <div class="flex items-center">
                    <span class="inline-flex px-1.5 py-0.5 text-xs rounded-md bg-gray-600 text-gray-200">
                      <%= user.activeStreamCount || 0 %> online
                    </span>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                <%= new Date(user.created_at).toLocaleDateString() %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <div class="flex space-x-2">
                  <button onclick="editUser('<%= user.id %>', '<%= user.username %>', '<%= user.user_role %>', '<%= user.status %>', '<%= user.avatar_path || '' %>')" 
                    class="text-blue-400 hover:text-blue-300 transition-colors" title="Edit User">
                    <i class="ti ti-edit"></i>
                  </button>
                  
                  <% if (user.id !== req.session.userId) { %>
                    <button onclick="deleteUser('<%= user.id %>', '<%= user.username %>')" 
                      class="text-red-400 hover:text-red-300 transition-colors" title="Delete User">
                      <i class="ti ti-trash"></i>
                    </button>
                  <% } %>
                </div>
              </td>
            </tr>
          <% }); %>
        <% } else { %>
          <tr id="defaultEmptyState">
            <td colspan="7" class="px-6 py-8 text-center text-gray-400">
              <i class="ti ti-users text-4xl mb-2"></i>
              <p>No users found</p>
            </td>
          </tr>
        <% } %>
        <tr id="searchEmptyState" class="hidden">
          <td colspan="7" class="px-6 py-8 text-center text-gray-400">
            <i class="ti ti-search-off text-4xl mb-2"></i>
            <p>No users match your search criteria</p>
            <p class="text-sm mt-1">Try adjusting your filters or search terms</p>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<div id="editModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 hidden transition-opacity">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-md border border-gray-600/50 transform transition-all opacity-0 scale-95" id="editModalContent">
      <div class="flex items-center justify-between p-4 border-b border-gray-600/50">
        <div class="flex items-center">
          <h3 class="text-lg font-medium">Edit User</h3>
        </div>
        <button onclick="closeEditModal()" class="rounded-full w-8 h-8 flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors">
          <i class="ti ti-x"></i>
        </button>
      </div>
      
      <div class="p-6">
        <form id="editUserForm" enctype="multipart/form-data">
          <input type="hidden" id="editUserId" name="userId">
          
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-300 mb-2">Profile Picture</label>
            <div class="flex items-center space-x-4">
              <div class="h-16 w-16 rounded-full overflow-hidden ring-2 ring-gray-600">
                <img id="editUserAvatar" src="/images/default-avatar.jpg" alt="User avatar" class="w-full h-full object-cover">
              </div>
              <div>
                <input type="file" id="editAvatarInput" name="avatar" accept="image/*" class="hidden">
                <button type="button" onclick="document.getElementById('editAvatarInput').click()" 
                  class="px-3 py-1 bg-primary hover:bg-blue-600 text-white text-sm rounded-lg transition-colors">
                  Change Photo
                </button>
              </div>
            </div>
          </div>

          <div class="mb-4">
            <label for="editUsername" class="block text-sm font-medium text-gray-300 mb-2">Username</label>
            <input type="text" id="editUsername" name="username" required placeholder="Enter username"
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
          </div>

          <div class="mb-4">
            <label for="editRole" class="block text-sm font-medium text-gray-300 mb-2">Role</label>
            <select id="editRole" name="role" 
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
              <option value="member">Member</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          <div class="mb-4">
            <label for="editStatus" class="block text-sm font-medium text-gray-300 mb-2">Status</label>
            <select id="editStatus" name="status" 
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>

          <div class="mb-6">
            <label for="editPassword" class="block text-sm font-medium text-gray-300 mb-2">New Password (optional)</label>
            <input type="password" id="editPassword" name="password" placeholder="Leave empty to keep current password"
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
          </div>
        </form>
      </div>
      
      <div class="flex justify-end p-4 border-t border-gray-600/50">
        <button type="button" onclick="closeEditModal()" 
          class="px-4 py-2 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg transition-colors mr-3">
          Cancel
        </button>
        <button type="submit" form="editUserForm"
          class="px-4 py-2 bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
          Save Changes
        </button>
      </div>
    </div>
  </div>
</div>

<div id="createModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 hidden transition-opacity">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-md border border-gray-600/50 transform transition-all opacity-0 scale-95" id="createModalContent">
      <div class="flex items-center justify-between p-4 border-b border-gray-600/50">
        <div class="flex items-center">
          <h3 class="text-lg font-medium">Create New User</h3>
        </div>
        <button onclick="closeCreateModal()" class="rounded-full w-8 h-8 flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors">
          <i class="ti ti-x"></i>
        </button>
      </div>
      
      <div class="p-6">
        <form id="createUserForm" enctype="multipart/form-data">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-300 mb-2">Profile Picture</label>
            <div class="flex items-center space-x-4">
              <div class="h-16 w-16 rounded-full overflow-hidden ring-2 ring-gray-600">
                <img id="createUserAvatar" src="/images/default-avatar.jpg" alt="User avatar" class="w-full h-full object-cover">
              </div>
              <div>
                <input type="file" id="createAvatarInput" name="avatar" accept="image/*" class="hidden">
                <button type="button" onclick="document.getElementById('createAvatarInput').click()" 
                  class="px-3 py-1 bg-primary hover:bg-blue-600 text-white text-sm rounded-lg transition-colors">
                  Choose Photo
                </button>
              </div>
            </div>
          </div>

          <div class="mb-4">
            <label for="createUsername" class="block text-sm font-medium text-gray-300 mb-2">Username</label>
            <input type="text" id="createUsername" name="username" required placeholder="Enter username"
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
          </div>

          <div class="mb-4">
            <label for="createRole" class="block text-sm font-medium text-gray-300 mb-2">Role</label>
            <select id="createRole" name="role" 
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
              <option value="member">Member</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          <div class="mb-4">
            <label for="createStatus" class="block text-sm font-medium text-gray-300 mb-2">Status</label>
            <select id="createStatus" name="status" 
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>

          <div class="mb-6">
            <label for="createPassword" class="block text-sm font-medium text-gray-300 mb-2">Password</label>
            <input type="password" id="createPassword" name="password" required placeholder="Enter password"
              class="w-full bg-dark-700 border border-gray-600 text-white px-3 py-2 rounded-lg focus:outline-none focus:ring-1 focus:ring-primary">
          </div>
        </form>
      </div>
      
      <div class="flex justify-end p-4 border-t border-gray-600/50">
        <button type="button" onclick="closeCreateModal()" 
          class="px-4 py-2 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg transition-colors mr-3">
          Cancel
        </button>
        <button type="submit" form="createUserForm"
          class="px-4 py-2 bg-primary hover:bg-blue-600 text-white rounded-lg transition-colors">
          Create User
        </button>
      </div>
    </div>
  </div>
</div>

<div id="confirmModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 hidden transition-opacity">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-md border border-gray-600/50 transform transition-all opacity-0 scale-95" id="confirmModalContent">
      <div class="flex items-center justify-between p-4 border-b border-gray-600/50">
        <div class="flex items-center">
          <h3 class="text-lg font-medium" id="modalTitle">Confirm Action</h3>
        </div>
        <button onclick="closeModal()" class="rounded-full w-8 h-8 flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors">
          <i class="ti ti-x"></i>
        </button>
      </div>
      
      <div class="p-6">
        <p class="text-gray-300" id="modalMessage">Are you sure you want to perform this action?</p>
      </div>
      
      <div class="flex justify-end p-4 border-t border-gray-600/50">
        <button onclick="closeModal()" 
          class="px-4 py-2 bg-dark-700 hover:bg-dark-600 text-gray-300 rounded-lg transition-colors mr-3">
          Cancel
        </button>
        <button id="confirmButton" 
          class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
          Confirm
        </button>
      </div>
    </div>
  </div>
</div>

<div id="toast" class="fixed top-16 right-4 bg-dark-800 text-white px-4 py-3 rounded-lg shadow-lg z-50 hidden flex items-center">
  <i id="toast-icon" class="mr-2"></i>
  <span id="toast-message"></span>
</div>

<div id="videoModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 opacity-0 pointer-events-none transition-opacity duration-300">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-2xl border border-gray-600/50 transform transition-transform duration-300 scale-95" id="videoModalContent">
      <div class="flex items-center justify-between p-4 border-b border-gray-600/50">
        <div class="flex items-center">
          <h3 class="text-lg font-medium" id="videoModalTitle">Video Collection</h3>
        </div>
        <button onclick="closeVideoModal()" class="rounded-full w-8 h-8 flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors">
          <i class="ti ti-x"></i>
        </button>
      </div>
      
      <div class="p-6 max-h-96 overflow-y-auto">
        <div id="videoList" class="space-y-3">
        </div>
        <div id="videoEmptyState" class="text-center py-12 hidden">
          <div class="w-16 h-16 bg-gray-600/30 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="ti ti-video-off text-2xl text-gray-400"></i>
          </div>
          <h4 class="text-lg font-medium text-gray-300 mb-2">No Videos Found</h4>
          <p class="text-gray-400 text-sm">This user hasn't uploaded any videos yet.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="streamModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 opacity-0 pointer-events-none transition-opacity duration-300">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-dark-800 rounded-lg shadow-xl w-full max-w-2xl border border-gray-600/50 transform transition-transform duration-300 scale-95" id="streamModalContent">
      <div class="flex items-center justify-between p-4 border-b border-gray-600/50">
        <div class="flex items-center">
          <h3 class="text-lg font-medium" id="streamModalTitle">Stream Collection</h3>
        </div>
        <button onclick="closeStreamModal()" class="rounded-full w-8 h-8 flex items-center justify-center text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors">
          <i class="ti ti-x"></i>
        </button>
      </div>
      
      <div class="p-6 max-h-96 overflow-y-auto">
        <div id="streamList" class="space-y-3">
        </div>
        <div id="streamEmptyState" class="text-center py-12 hidden">
          <div class="w-16 h-16 bg-gray-600/30 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="ti ti-broadcast-off text-2xl text-gray-400"></i>
          </div>
          <h4 class="text-lg font-medium text-gray-300 mb-2">No Streams Found</h4>
          <p class="text-gray-400 text-sm">This user hasn't created any streams yet.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let currentAction = null;

function showToast(message, type = 'success') {
  const toast = document.getElementById('toast');
  const toastIcon = document.getElementById('toast-icon');
  const toastMessage = document.getElementById('toast-message');
  
  if (type === 'success') {
    toastIcon.className = 'ti ti-check text-green-400 mr-2';
  } else {
    toastIcon.className = 'ti ti-x text-red-400 mr-2';
  }
  
  toast.className = 'fixed top-16 right-4 bg-dark-800 text-white px-4 py-3 rounded-lg shadow-lg z-50 flex items-center';
  toastMessage.textContent = message;
  toast.classList.remove('hidden');
  
  setTimeout(() => {
    toast.classList.add('hidden');
  }, 3000);
}

function openEditModal(userId, username, role, status, avatar) {
  document.getElementById('editUserId').value = userId;
  document.getElementById('editUsername').value = username;
  document.getElementById('editRole').value = role;
  document.getElementById('editStatus').value = status;
  document.getElementById('editPassword').value = '';
  
  const avatarImg = document.getElementById('editUserAvatar');
  if (avatar && avatar !== 'null') {
    avatarImg.src = `/uploads/avatars/${avatar}`;
  } else {
    avatarImg.src = '/images/default-avatar.jpg';
  }
  
  const modal = document.getElementById('editModal');
  const modalContent = document.getElementById('editModalContent');
  
  modal.classList.remove('hidden');
  
  setTimeout(() => {
    modal.classList.remove('opacity-0');
    modalContent.classList.remove('opacity-0', 'scale-95');
    modalContent.classList.add('opacity-100', 'scale-100');
  }, 10);
}

function openCreateModal() {
  document.getElementById('createUsername').value = '';
  document.getElementById('createRole').value = 'member';
  document.getElementById('createStatus').value = 'active';
  document.getElementById('createPassword').value = '';
  document.getElementById('createUserAvatar').src = '/images/default-avatar.jpg';
  document.getElementById('createAvatarInput').value = '';
  
  const modal = document.getElementById('createModal');
  const modalContent = document.getElementById('createModalContent');
  
  modal.classList.remove('hidden');
  
  setTimeout(() => {
    modal.classList.remove('opacity-0');
    modalContent.classList.remove('opacity-0', 'scale-95');
    modalContent.classList.add('opacity-100', 'scale-100');
  }, 10);
}

function closeCreateModal() {
  const modal = document.getElementById('createModal');
  const modalContent = document.getElementById('createModalContent');
  
  modal.classList.add('opacity-0');
  modalContent.classList.remove('opacity-100', 'scale-100');
  modalContent.classList.add('opacity-0', 'scale-95');
  
  setTimeout(() => {
    modal.classList.add('hidden');
    document.getElementById('createUserForm').reset();
    document.getElementById('createUserAvatar').src = '/images/default-avatar.jpg';
  }, 200);
}

function editUser(userId, username, role, status, avatarPath) {
  openEditModal(userId, username, role, status, avatarPath);
}

function closeEditModal() {
  const modal = document.getElementById('editModal');
  const modalContent = document.getElementById('editModalContent');
  
  modal.classList.add('opacity-0');
  modalContent.classList.remove('opacity-100', 'scale-100');
  modalContent.classList.add('opacity-0', 'scale-95');
  
  setTimeout(() => {
    modal.classList.add('hidden');
    document.getElementById('editUserForm').reset();
  }, 200);
}

document.getElementById('editAvatarInput').addEventListener('change', function(e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      document.getElementById('editUserAvatar').src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

document.getElementById('createAvatarInput').addEventListener('change', function(e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      document.getElementById('createUserAvatar').src = e.target.result;
    };
    reader.readAsDataURL(file);
  }
});

document.getElementById('editUserForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  
  fetch('/api/users/update', {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showToast('User updated successfully', 'success');
      closeEditModal();
      setTimeout(() => location.reload(), 1000);
    } else {
      showToast('Error: ' + data.message, 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showToast('An error occurred while updating user', 'error');
  });
});

document.getElementById('createUserForm').addEventListener('submit', function(e) {
  e.preventDefault();
  
  const formData = new FormData(this);
  
  fetch('/api/users/create', {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      showToast('User created successfully', 'success');
      closeCreateModal();
      setTimeout(() => location.reload(), 1000);
    } else {
      showToast('Error: ' + data.message, 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showToast('An error occurred while creating user', 'error');
  });
});

function deleteUser(userId, username) {
  const title = 'Delete User';
  const message = `Are you sure you want to delete user "${username}"? This action cannot be undone.`;
  
  showConfirmModal(title, message, () => {
    fetch('/api/users/delete', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ userId })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showToast('User deleted successfully', 'success');
        setTimeout(() => location.reload(), 1000);
      } else {
        showToast('Error: ' + data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('An error occurred while deleting user', 'error');
    });
  });
}

function showConfirmModal(title, message, onConfirm) {
  document.getElementById('modalTitle').textContent = title;
  document.getElementById('modalMessage').textContent = message;
  currentAction = onConfirm;
  
  const modal = document.getElementById('confirmModal');
  const modalContent = document.getElementById('confirmModalContent');
  
  modal.classList.remove('hidden');
  
  setTimeout(() => {
    modal.classList.remove('opacity-0');
    modalContent.classList.remove('opacity-0', 'scale-95');
    modalContent.classList.add('opacity-100', 'scale-100');
  }, 10);
}

function closeModal() {
  const modal = document.getElementById('confirmModal');
  const modalContent = document.getElementById('confirmModalContent');
  
  modal.classList.add('opacity-0');
  modalContent.classList.remove('opacity-100', 'scale-100');
  modalContent.classList.add('opacity-0', 'scale-95');
  
  setTimeout(() => {
    modal.classList.add('hidden');
    currentAction = null;
  }, 200);
}

function confirmAction() {
  if (currentAction) {
    currentAction();
  }
  closeModal();
}

document.getElementById('confirmButton').addEventListener('click', confirmAction);

document.getElementById('searchInput').addEventListener('input', filterUsers);
document.getElementById('roleFilter').addEventListener('change', filterUsers);
document.getElementById('statusFilter').addEventListener('change', filterUsers);

function filterUsers() {
  const searchTerm = document.getElementById('searchInput').value.toLowerCase();
  const roleFilter = document.getElementById('roleFilter').value;
  const statusFilter = document.getElementById('statusFilter').value;
  
  const rows = document.querySelectorAll('.user-row');
  const defaultEmptyState = document.getElementById('defaultEmptyState');
  const searchEmptyState = document.getElementById('searchEmptyState');
  
  let visibleCount = 0;
  const hasFilters = searchTerm || roleFilter || statusFilter;
  
  rows.forEach(row => {
    const username = row.dataset.username;
    const role = row.dataset.role;
    const status = row.dataset.status;
    
    const matchesSearch = username.includes(searchTerm);
    const matchesRole = !roleFilter || role === roleFilter;
    const matchesStatus = !statusFilter || status === statusFilter;
    
    if (matchesSearch && matchesRole && matchesStatus) {
      row.style.display = '';
      visibleCount++;
    } else {
      row.style.display = 'none';
    }
  });
  
  if (defaultEmptyState) {
    defaultEmptyState.style.display = 'none';
  }
  
  if (hasFilters && visibleCount === 0) {
    searchEmptyState.classList.remove('hidden');
  } else {
    searchEmptyState.classList.add('hidden');
  }
  
  if (!hasFilters && visibleCount === 0 && defaultEmptyState) {
    defaultEmptyState.style.display = '';
  }
}

function showVideoModal(element) {
  const userId = element.dataset.userId;
  const username = element.dataset.username;
  
  const modal = document.getElementById('videoModal');
  const videoList = document.getElementById('videoList');
  const title = document.getElementById('videoModalTitle');
  
  title.textContent = `Videos by ${username}`;
  
  modal.classList.remove('opacity-0', 'pointer-events-none');
  modal.querySelector('.bg-dark-800').classList.remove('scale-95');
  
  videoList.innerHTML = '<div class="flex items-center justify-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div></div>';
  
  fetch(`/api/users/${userId}/videos`)
    .then(response => response.json())
    .then(data => {
      const emptyState = document.getElementById('videoEmptyState');
      
      if (data.success && data.videos && data.videos.length > 0) {
        videoList.innerHTML = data.videos.map(video => `
          <div class="flex items-center justify-between p-4 bg-dark-700 rounded-lg border border-gray-600/50 hover:bg-dark-600/50 transition-colors">
            <div class="flex items-center space-x-4">
              <div class="w-16 h-12 bg-gray-600 rounded-lg overflow-hidden flex-shrink-0">
                ${video.thumbnail_path ? 
                  `<img src="${video.thumbnail_path}" alt="${video.title || video.filename}" class="w-full h-full object-cover" onerror="this.onerror=null; this.parentElement.innerHTML='<i class=\\'ti ti-video text-gray-400 text-lg\\' style=\\'display: flex; align-items: center; justify-content: center; height: 100%;\\' ></i>';">` :
                  `<i class="ti ti-video text-gray-400 text-lg" style="display: flex; align-items: center; justify-content: center; height: 100%;"></i>`
                }
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-white font-medium truncate">${video.title || video.filename}</p>
                <div class="flex items-center space-x-2 mt-1">
                  <p class="text-gray-400 text-sm">${formatDate(video.created_at)}</p>
                  <span class="text-gray-500">•</span>
                  <p class="text-gray-400 text-sm">${formatDuration(video.duration)}</p>
                </div>
              </div>
            </div>
            <div class="text-right flex-shrink-0">
              <span class="inline-flex px-2.5 py-1 text-xs font-medium rounded-md bg-blue-600/20 text-blue-300 border border-blue-600/30">
                ${formatFileSize(video.file_size)}
              </span>
            </div>
          </div>
        `).join('');
        emptyState.classList.add('hidden');
      } else {
        videoList.innerHTML = '';
        emptyState.classList.remove('hidden');
      }
    })
    .catch(error => {
      console.error('Error fetching videos:', error);
      document.getElementById('videoList').innerHTML = '<p class="text-red-400 text-center">Error loading videos</p>';
    });
}

function showStreamModal(element) {
  const userId = element.dataset.userId;
  const username = element.dataset.username;
  
  const modal = document.getElementById('streamModal');
  const streamList = document.getElementById('streamList');
  const title = document.getElementById('streamModalTitle');
  
  title.textContent = `Streams by ${username}`;
  
  modal.classList.remove('opacity-0', 'pointer-events-none');
  modal.querySelector('.bg-dark-800').classList.remove('scale-95');
  
  streamList.innerHTML = '<div class="flex items-center justify-center p-8"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-red-500"></div></div>';
  
  fetch(`/api/users/${userId}/streams`)
    .then(response => response.json())
    .then(data => {
      const streamList = document.getElementById('streamList');
      const emptyState = document.getElementById('streamEmptyState');
      
      if (data.success && data.streams && data.streams.length > 0) {
        streamList.innerHTML = data.streams.map(stream => `
          <div class="flex items-center justify-between p-4 bg-dark-700 rounded-lg border border-gray-600/50 hover:bg-dark-600/50 transition-colors">
            <div class="flex items-center space-x-4">
              <div class="w-16 h-12 bg-gray-600 rounded-lg overflow-hidden flex-shrink-0">
                ${stream.video_thumbnail ? 
                  `<img src="${stream.video_thumbnail}" alt="${stream.title}" class="w-full h-full object-cover" onerror="this.onerror=null; this.parentElement.innerHTML='<i class=\\'ti ti-broadcast text-gray-400 text-lg\\' style=\\'display: flex; align-items: center; justify-content: center; height: 100%;\\' ></i>';">` :
                  `<i class="ti ti-broadcast text-gray-400 text-lg" style="display: flex; align-items: center; justify-content: center; height: 100%;"></i>`
                }
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-white font-medium truncate">${stream.title}</p>
                <div class="flex items-center space-x-2 mt-1">
                  <p class="text-gray-400 text-sm">${stream.platform || 'Unknown Platform'}</p>
                  <span class="text-gray-500">•</span>
                  <p class="text-gray-400 text-sm">${formatDate(stream.created_at)}</p>
                </div>
              </div>
            </div>
            <div class="text-right flex-shrink-0">
              <div class="flex flex-col items-end space-y-1">
                <span class="inline-flex items-center px-2.5 py-1 text-xs font-medium rounded-md ${
                  stream.status === 'live' ? 'bg-red-600/20 text-red-300 border border-red-600/30' : 
                  stream.status === 'scheduled' ? 'bg-yellow-600/20 text-yellow-300 border border-yellow-600/30' :
                  'bg-gray-600/20 text-gray-300 border border-gray-600/30'
                }">
                  ${stream.status === 'live' ? 
                    '<span class="w-1.5 h-1.5 rounded-full bg-red-400 animate-pulse mr-1.5"></span>Live' : 
                    stream.status === 'scheduled' ? 'Scheduled' : 'Offline'
                  }
                </span>
                ${stream.start_time ? `<span class="text-xs text-gray-400">Started: ${formatDate(stream.start_time)}</span>` : 
                  stream.status === 'scheduled' ? `<span class="text-xs text-gray-400">Not started yet</span>` :
                  `<span class="text-xs text-gray-400">Never started</span>`}
              </div>
            </div>
          </div>
        `).join('');
        emptyState.classList.add('hidden');
      } else {
        streamList.innerHTML = '';
        emptyState.classList.remove('hidden');
      }
    })
    .catch(error => {
      console.error('Error fetching streams:', error);
      document.getElementById('streamList').innerHTML = '<p class="text-red-400 text-center">Error loading streams</p>';
    });
}

function closeVideoModal() {
  const modal = document.getElementById('videoModal');
  modal.querySelector('.bg-dark-800').classList.add('scale-95');
  modal.classList.add('opacity-0', 'pointer-events-none');
}

function closeStreamModal() {
  const modal = document.getElementById('streamModal');
  modal.querySelector('.bg-dark-800').classList.add('scale-95');
  modal.classList.add('opacity-0', 'pointer-events-none');
}

function formatDate(dateString) {
      if (!dateString) return 'Unknown';
      const date = new Date(dateString);
      return date.toLocaleDateString('id-ID', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      }) + ' ' + date.toLocaleTimeString('id-ID', {
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    function formatFileSize(bytes) {
      if (!bytes || bytes === 0) return '0 B';
      const k = 1024;
      const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function formatDuration(seconds) {
      if (!seconds || seconds === 0) return '00:00:00';
      
      const totalSeconds = Math.floor(parseFloat(seconds));
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const secs = totalSeconds % 60;
      
      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
</script>